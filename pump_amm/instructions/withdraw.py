'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class WithdrawArgs(typing.TypedDict):
    lpTokenAmountIn:int
    minBaseAmountOut:int
    minQuoteAmountOut:int


layout = borsh.CStruct(
    "lpTokenAmountIn" /borsh.U64,
    "minBaseAmountOut" /borsh.U64,
    "minQuoteAmountOut" /borsh.U64,
    )


class WithdrawAccounts(typing.TypedDict):
    pool:SolPubkey
    globalConfig:SolPubkey
    user:SolPubkey
    baseMint:SolPubkey
    quoteMint:SolPubkey
    lpMint:SolPubkey
    userBaseTokenAccount:SolPubkey
    userQuoteTokenAccount:SolPubkey
    userPoolTokenAccount:SolPubkey
    poolBaseTokenAccount:SolPubkey
    poolQuoteTokenAccount:SolPubkey
    tokenProgram:SolPubkey
    token2022Program:SolPubkey
    eventAuthority:SolPubkey
    program:SolPubkey

def Withdraw(
    args: WithdrawArgs,
    accounts: WithdrawAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["pool"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["globalConfig"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["user"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["baseMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["quoteMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lpMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userBaseTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userQuoteTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userPoolTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolBaseTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["poolQuoteTokenAccount"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["token2022Program"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["eventAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["program"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xb7\x12\x46\x9c\x94\x6d\xa1\x22"
    encoded_args = layout.build({
        "lpTokenAmountIn":args["lpTokenAmountIn"],
        "minBaseAmountOut":args["minBaseAmountOut"],
        "minQuoteAmountOut":args["minQuoteAmountOut"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






def find_EventAuthority() -> typing.Tuple[SolPubkey, int]:
    seeds = [
       b"\x5f\x5f\x65\x76\x65\x6e\x74\x5f\x61\x75\x74\x68\x6f\x72\x69\x74\x79",
    ]

    address, bump = SolPubkey.find_program_address(seeds,
        PROGRAM_ID
            )

    return address, bump



