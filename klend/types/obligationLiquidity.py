'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey
from . import bigFractionBytes

class ObligationLiquidityJSON(typing.TypedDict):
    borrowReserve: str
    cumulativeBorrowRateBsf: bigFractionBytes.BigFractionBytesJSON
    padding: int
    borrowedAmountSf: int
    marketValueSf: int
    borrowFactorAdjustedMarketValueSf: int
    borrowedAmountOutsideElevationGroups: int
    padding2: list[int]

@dataclass
class ObligationLiquidity:
    layout: typing.ClassVar = borsh.CStruct(
        "borrowReserve" /BorshPubkey,
        "cumulativeBorrowRateBsf" /bigFractionBytes.BigFractionBytes.layout,
        "padding" /borsh.U64,
        "borrowedAmountSf" /borsh.U128,
        "marketValueSf" /borsh.U128,
        "borrowFactorAdjustedMarketValueSf" /borsh.U128,
        "borrowedAmountOutsideElevationGroups" /borsh.U64,
        "padding2" /borsh.U64[7],
        )
    #fields
    borrowReserve: SolPubkey
    cumulativeBorrowRateBsf: bigFractionBytes.BigFractionBytes
    padding: int
    borrowedAmountSf: int
    marketValueSf: int
    borrowFactorAdjustedMarketValueSf: int
    borrowedAmountOutsideElevationGroups: int
    padding2: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ObligationLiquidity":
        return cls(
        borrowReserve=obj["borrowReserve"],
        cumulativeBorrowRateBsf=bigFractionBytes.BigFractionBytes.from_decoded(obj["cumulativeBorrowRateBsf"]),
        padding=obj["padding"],
        borrowedAmountSf=obj["borrowedAmountSf"],
        marketValueSf=obj["marketValueSf"],
        borrowFactorAdjustedMarketValueSf=obj["borrowFactorAdjustedMarketValueSf"],
        borrowedAmountOutsideElevationGroups=obj["borrowedAmountOutsideElevationGroups"],
        padding2=obj["padding2"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "borrowReserve": self.borrowReserve,
                "cumulativeBorrowRateBsf": self.cumulativeBorrowRateBsf.to_encodable(),
                "padding": self.padding,
                "borrowedAmountSf": self.borrowedAmountSf,
                "marketValueSf": self.marketValueSf,
                "borrowFactorAdjustedMarketValueSf": self.borrowFactorAdjustedMarketValueSf,
                "borrowedAmountOutsideElevationGroups": self.borrowedAmountOutsideElevationGroups,
                "padding2": self.padding2,
                }

    def to_json(self) -> ObligationLiquidityJSON:
        return {
                "borrowReserve": str(self.borrowReserve),
                "cumulativeBorrowRateBsf": self.cumulativeBorrowRateBsf.to_json(),
                "padding": self.padding,
                "borrowedAmountSf": self.borrowedAmountSf,
                "marketValueSf": self.marketValueSf,
                "borrowFactorAdjustedMarketValueSf": self.borrowFactorAdjustedMarketValueSf,
                "borrowedAmountOutsideElevationGroups": self.borrowedAmountOutsideElevationGroups,
                "padding2": self.padding2,
                }

    @classmethod
    def from_json(cls, obj: ObligationLiquidityJSON) -> "ObligationLiquidity":
        return cls(
                borrowReserve=SolPubkey.from_string(obj["borrowReserve"]),
                cumulativeBorrowRateBsf=bigFractionBytes.BigFractionBytes.from_json(obj["cumulativeBorrowRateBsf"]),
                padding=obj["padding"],
                borrowedAmountSf=obj["borrowedAmountSf"],
                marketValueSf=obj["marketValueSf"],
                borrowFactorAdjustedMarketValueSf=obj["borrowFactorAdjustedMarketValueSf"],
                borrowedAmountOutsideElevationGroups=obj["borrowedAmountOutsideElevationGroups"],
                padding2=obj["padding2"],
        )






