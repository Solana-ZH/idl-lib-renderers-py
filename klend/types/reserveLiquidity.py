'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey
from . import bigFractionBytes

class ReserveLiquidityJSON(typing.TypedDict):
    mintPubkey: str
    supplyVault: str
    feeVault: str
    availableAmount: int
    borrowedAmountSf: int
    marketPriceSf: int
    marketPriceLastUpdatedTs: int
    mintDecimals: int
    depositLimitCrossedTimestamp: int
    borrowLimitCrossedTimestamp: int
    cumulativeBorrowRateBsf: bigFractionBytes.BigFractionBytesJSON
    accumulatedProtocolFeesSf: int
    accumulatedReferrerFeesSf: int
    pendingReferrerFeesSf: int
    absoluteReferralRateSf: int
    tokenProgram: str
    padding2: list[int]
    padding3: list[int]

@dataclass
class ReserveLiquidity:
    layout: typing.ClassVar = borsh.CStruct(
        "mintPubkey" /BorshPubkey,
        "supplyVault" /BorshPubkey,
        "feeVault" /BorshPubkey,
        "availableAmount" /borsh.U64,
        "borrowedAmountSf" /borsh.U128,
        "marketPriceSf" /borsh.U128,
        "marketPriceLastUpdatedTs" /borsh.U64,
        "mintDecimals" /borsh.U64,
        "depositLimitCrossedTimestamp" /borsh.U64,
        "borrowLimitCrossedTimestamp" /borsh.U64,
        "cumulativeBorrowRateBsf" /bigFractionBytes.BigFractionBytes.layout,
        "accumulatedProtocolFeesSf" /borsh.U128,
        "accumulatedReferrerFeesSf" /borsh.U128,
        "pendingReferrerFeesSf" /borsh.U128,
        "absoluteReferralRateSf" /borsh.U128,
        "tokenProgram" /BorshPubkey,
        "padding2" /borsh.U64[51],
        "padding3" /borsh.U128[32],
        )
    #fields
    mintPubkey: SolPubkey
    supplyVault: SolPubkey
    feeVault: SolPubkey
    availableAmount: int
    borrowedAmountSf: int
    marketPriceSf: int
    marketPriceLastUpdatedTs: int
    mintDecimals: int
    depositLimitCrossedTimestamp: int
    borrowLimitCrossedTimestamp: int
    cumulativeBorrowRateBsf: bigFractionBytes.BigFractionBytes
    accumulatedProtocolFeesSf: int
    accumulatedReferrerFeesSf: int
    pendingReferrerFeesSf: int
    absoluteReferralRateSf: int
    tokenProgram: SolPubkey
    padding2: list[int]
    padding3: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ReserveLiquidity":
        return cls(
        mintPubkey=obj["mintPubkey"],
        supplyVault=obj["supplyVault"],
        feeVault=obj["feeVault"],
        availableAmount=obj["availableAmount"],
        borrowedAmountSf=obj["borrowedAmountSf"],
        marketPriceSf=obj["marketPriceSf"],
        marketPriceLastUpdatedTs=obj["marketPriceLastUpdatedTs"],
        mintDecimals=obj["mintDecimals"],
        depositLimitCrossedTimestamp=obj["depositLimitCrossedTimestamp"],
        borrowLimitCrossedTimestamp=obj["borrowLimitCrossedTimestamp"],
        cumulativeBorrowRateBsf=bigFractionBytes.BigFractionBytes.from_decoded(obj["cumulativeBorrowRateBsf"]),
        accumulatedProtocolFeesSf=obj["accumulatedProtocolFeesSf"],
        accumulatedReferrerFeesSf=obj["accumulatedReferrerFeesSf"],
        pendingReferrerFeesSf=obj["pendingReferrerFeesSf"],
        absoluteReferralRateSf=obj["absoluteReferralRateSf"],
        tokenProgram=obj["tokenProgram"],
        padding2=obj["padding2"],
        padding3=obj["padding3"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "mintPubkey": self.mintPubkey,
                "supplyVault": self.supplyVault,
                "feeVault": self.feeVault,
                "availableAmount": self.availableAmount,
                "borrowedAmountSf": self.borrowedAmountSf,
                "marketPriceSf": self.marketPriceSf,
                "marketPriceLastUpdatedTs": self.marketPriceLastUpdatedTs,
                "mintDecimals": self.mintDecimals,
                "depositLimitCrossedTimestamp": self.depositLimitCrossedTimestamp,
                "borrowLimitCrossedTimestamp": self.borrowLimitCrossedTimestamp,
                "cumulativeBorrowRateBsf": self.cumulativeBorrowRateBsf.to_encodable(),
                "accumulatedProtocolFeesSf": self.accumulatedProtocolFeesSf,
                "accumulatedReferrerFeesSf": self.accumulatedReferrerFeesSf,
                "pendingReferrerFeesSf": self.pendingReferrerFeesSf,
                "absoluteReferralRateSf": self.absoluteReferralRateSf,
                "tokenProgram": self.tokenProgram,
                "padding2": self.padding2,
                "padding3": self.padding3,
                }

    def to_json(self) -> ReserveLiquidityJSON:
        return {
                "mintPubkey": str(self.mintPubkey),
                "supplyVault": str(self.supplyVault),
                "feeVault": str(self.feeVault),
                "availableAmount": self.availableAmount,
                "borrowedAmountSf": self.borrowedAmountSf,
                "marketPriceSf": self.marketPriceSf,
                "marketPriceLastUpdatedTs": self.marketPriceLastUpdatedTs,
                "mintDecimals": self.mintDecimals,
                "depositLimitCrossedTimestamp": self.depositLimitCrossedTimestamp,
                "borrowLimitCrossedTimestamp": self.borrowLimitCrossedTimestamp,
                "cumulativeBorrowRateBsf": self.cumulativeBorrowRateBsf.to_json(),
                "accumulatedProtocolFeesSf": self.accumulatedProtocolFeesSf,
                "accumulatedReferrerFeesSf": self.accumulatedReferrerFeesSf,
                "pendingReferrerFeesSf": self.pendingReferrerFeesSf,
                "absoluteReferralRateSf": self.absoluteReferralRateSf,
                "tokenProgram": str(self.tokenProgram),
                "padding2": self.padding2,
                "padding3": self.padding3,
                }

    @classmethod
    def from_json(cls, obj: ReserveLiquidityJSON) -> "ReserveLiquidity":
        return cls(
                mintPubkey=SolPubkey.from_string(obj["mintPubkey"]),
                supplyVault=SolPubkey.from_string(obj["supplyVault"]),
                feeVault=SolPubkey.from_string(obj["feeVault"]),
                availableAmount=obj["availableAmount"],
                borrowedAmountSf=obj["borrowedAmountSf"],
                marketPriceSf=obj["marketPriceSf"],
                marketPriceLastUpdatedTs=obj["marketPriceLastUpdatedTs"],
                mintDecimals=obj["mintDecimals"],
                depositLimitCrossedTimestamp=obj["depositLimitCrossedTimestamp"],
                borrowLimitCrossedTimestamp=obj["borrowLimitCrossedTimestamp"],
                cumulativeBorrowRateBsf=bigFractionBytes.BigFractionBytes.from_json(obj["cumulativeBorrowRateBsf"]),
                accumulatedProtocolFeesSf=obj["accumulatedProtocolFeesSf"],
                accumulatedReferrerFeesSf=obj["accumulatedReferrerFeesSf"],
                pendingReferrerFeesSf=obj["pendingReferrerFeesSf"],
                absoluteReferralRateSf=obj["absoluteReferralRateSf"],
                tokenProgram=SolPubkey.from_string(obj["tokenProgram"]),
                padding2=obj["padding2"],
                padding3=obj["padding3"],
        )






