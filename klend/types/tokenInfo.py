'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from construct import Container
from dataclasses import dataclass
from . import priceHeuristic, pythConfiguration, scopeConfiguration, switchboardConfiguration

class TokenInfoJSON(typing.TypedDict):
    name: list[int]
    heuristic: priceHeuristic.PriceHeuristicJSON
    maxTwapDivergenceBps: int
    maxAgePriceSeconds: int
    maxAgeTwapSeconds: int
    scopeConfiguration: scopeConfiguration.ScopeConfigurationJSON
    switchboardConfiguration: switchboardConfiguration.SwitchboardConfigurationJSON
    pythConfiguration: pythConfiguration.PythConfigurationJSON
    blockPriceUsage: int
    reserved: list[int]
    padding: list[int]

@dataclass
class TokenInfo:
    layout: typing.ClassVar = borsh.CStruct(
        "name" /borsh.U8[32],
        "heuristic" /priceHeuristic.PriceHeuristic.layout,
        "maxTwapDivergenceBps" /borsh.U64,
        "maxAgePriceSeconds" /borsh.U64,
        "maxAgeTwapSeconds" /borsh.U64,
        "scopeConfiguration" /scopeConfiguration.ScopeConfiguration.layout,
        "switchboardConfiguration" /switchboardConfiguration.SwitchboardConfiguration.layout,
        "pythConfiguration" /pythConfiguration.PythConfiguration.layout,
        "blockPriceUsage" /borsh.U8,
        "reserved" /borsh.U8[7],
        "padding" /borsh.U64[19],
        )
    #fields
    name: list[int]
    heuristic: priceHeuristic.PriceHeuristic
    maxTwapDivergenceBps: int
    maxAgePriceSeconds: int
    maxAgeTwapSeconds: int
    scopeConfiguration: scopeConfiguration.ScopeConfiguration
    switchboardConfiguration: switchboardConfiguration.SwitchboardConfiguration
    pythConfiguration: pythConfiguration.PythConfiguration
    blockPriceUsage: int
    reserved: list[int]
    padding: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "TokenInfo":
        return cls(
        name=obj["name"],
        heuristic=priceHeuristic.PriceHeuristic.from_decoded(obj["heuristic"]),
        maxTwapDivergenceBps=obj["maxTwapDivergenceBps"],
        maxAgePriceSeconds=obj["maxAgePriceSeconds"],
        maxAgeTwapSeconds=obj["maxAgeTwapSeconds"],
        scopeConfiguration=scopeConfiguration.ScopeConfiguration.from_decoded(obj["scopeConfiguration"]),
        switchboardConfiguration=switchboardConfiguration.SwitchboardConfiguration.from_decoded(obj["switchboardConfiguration"]),
        pythConfiguration=pythConfiguration.PythConfiguration.from_decoded(obj["pythConfiguration"]),
        blockPriceUsage=obj["blockPriceUsage"],
        reserved=obj["reserved"],
        padding=obj["padding"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "name": self.name,
                "heuristic": self.heuristic.to_encodable(),
                "maxTwapDivergenceBps": self.maxTwapDivergenceBps,
                "maxAgePriceSeconds": self.maxAgePriceSeconds,
                "maxAgeTwapSeconds": self.maxAgeTwapSeconds,
                "scopeConfiguration": self.scopeConfiguration.to_encodable(),
                "switchboardConfiguration": self.switchboardConfiguration.to_encodable(),
                "pythConfiguration": self.pythConfiguration.to_encodable(),
                "blockPriceUsage": self.blockPriceUsage,
                "reserved": self.reserved,
                "padding": self.padding,
                }

    def to_json(self) -> TokenInfoJSON:
        return {
                "name": self.name,
                "heuristic": self.heuristic.to_json(),
                "maxTwapDivergenceBps": self.maxTwapDivergenceBps,
                "maxAgePriceSeconds": self.maxAgePriceSeconds,
                "maxAgeTwapSeconds": self.maxAgeTwapSeconds,
                "scopeConfiguration": self.scopeConfiguration.to_json(),
                "switchboardConfiguration": self.switchboardConfiguration.to_json(),
                "pythConfiguration": self.pythConfiguration.to_json(),
                "blockPriceUsage": self.blockPriceUsage,
                "reserved": self.reserved,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: TokenInfoJSON) -> "TokenInfo":
        return cls(
                name=obj["name"],
                heuristic=priceHeuristic.PriceHeuristic.from_json(obj["heuristic"]),
                maxTwapDivergenceBps=obj["maxTwapDivergenceBps"],
                maxAgePriceSeconds=obj["maxAgePriceSeconds"],
                maxAgeTwapSeconds=obj["maxAgeTwapSeconds"],
                scopeConfiguration=scopeConfiguration.ScopeConfiguration.from_json(obj["scopeConfiguration"]),
                switchboardConfiguration=switchboardConfiguration.SwitchboardConfiguration.from_json(obj["switchboardConfiguration"]),
                pythConfiguration=pythConfiguration.PythConfiguration.from_json(obj["pythConfiguration"]),
                blockPriceUsage=obj["blockPriceUsage"],
                reserved=obj["reserved"],
                padding=obj["padding"],
        )






