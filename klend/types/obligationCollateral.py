'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey

class ObligationCollateralJSON(typing.TypedDict):
    depositReserve: str
    depositedAmount: int
    marketValueSf: int
    borrowedAmountAgainstThisCollateralInElevationGroup: int
    padding: list[int]

@dataclass
class ObligationCollateral:
    layout: typing.ClassVar = borsh.CStruct(
        "depositReserve" /BorshPubkey,
        "depositedAmount" /borsh.U64,
        "marketValueSf" /borsh.U128,
        "borrowedAmountAgainstThisCollateralInElevationGroup" /borsh.U64,
        "padding" /borsh.U64[9],
        )
    #fields
    depositReserve: SolPubkey
    depositedAmount: int
    marketValueSf: int
    borrowedAmountAgainstThisCollateralInElevationGroup: int
    padding: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ObligationCollateral":
        return cls(
        depositReserve=obj["depositReserve"],
        depositedAmount=obj["depositedAmount"],
        marketValueSf=obj["marketValueSf"],
        borrowedAmountAgainstThisCollateralInElevationGroup=obj["borrowedAmountAgainstThisCollateralInElevationGroup"],
        padding=obj["padding"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "depositReserve": self.depositReserve,
                "depositedAmount": self.depositedAmount,
                "marketValueSf": self.marketValueSf,
                "borrowedAmountAgainstThisCollateralInElevationGroup": self.borrowedAmountAgainstThisCollateralInElevationGroup,
                "padding": self.padding,
                }

    def to_json(self) -> ObligationCollateralJSON:
        return {
                "depositReserve": str(self.depositReserve),
                "depositedAmount": self.depositedAmount,
                "marketValueSf": self.marketValueSf,
                "borrowedAmountAgainstThisCollateralInElevationGroup": self.borrowedAmountAgainstThisCollateralInElevationGroup,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: ObligationCollateralJSON) -> "ObligationCollateral":
        return cls(
                depositReserve=SolPubkey.from_string(obj["depositReserve"]),
                depositedAmount=obj["depositedAmount"],
                marketValueSf=obj["marketValueSf"],
                borrowedAmountAgainstThisCollateralInElevationGroup=obj["borrowedAmountAgainstThisCollateralInElevationGroup"],
                padding=obj["padding"],
        )






