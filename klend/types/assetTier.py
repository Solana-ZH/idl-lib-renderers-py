'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class RegularJSON(typing.TypedDict):
    kind: typing.Literal["Regular"]


@dataclass
class Regular:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> RegularJSON:
        return RegularJSON(
            kind="Regular",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Regular": {},
        }




class IsolatedCollateralJSON(typing.TypedDict):
    kind: typing.Literal["IsolatedCollateral"]


@dataclass
class IsolatedCollateral:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> IsolatedCollateralJSON:
        return IsolatedCollateralJSON(
            kind="IsolatedCollateral",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "IsolatedCollateral": {},
        }




class IsolatedDebtJSON(typing.TypedDict):
    kind: typing.Literal["IsolatedDebt"]


@dataclass
class IsolatedDebt:
    discriminator: typing.ClassVar = 2
    def to_json(self) -> IsolatedDebtJSON:
        return IsolatedDebtJSON(
            kind="IsolatedDebt",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "IsolatedDebt": {},
        }





AssetTierKind = typing.Union[
    Regular,
    IsolatedCollateral,
    IsolatedDebt,
]
AssetTierJSON = typing.Union[
    RegularJSON,
    IsolatedCollateralJSON,
    IsolatedDebtJSON,
]

def from_decoded(obj: dict) -> AssetTierKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Regular" in obj:
      return Regular()
    if "IsolatedCollateral" in obj:
      return IsolatedCollateral()
    if "IsolatedDebt" in obj:
      return IsolatedDebt()
    raise ValueError("Invalid enum object")

def from_json(obj: AssetTierJSON) -> AssetTierKind:
    if obj["kind"] == "Regular":
        return Regular()

    if obj["kind"] == "IsolatedCollateral":
        return IsolatedCollateral()

    if obj["kind"] == "IsolatedDebt":
        return IsolatedDebt()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"Regular" / borsh.CStruct(),
"IsolatedCollateral" / borsh.CStruct(),
"IsolatedDebt" / borsh.CStruct(),
)
