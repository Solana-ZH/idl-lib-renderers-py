'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import EnumForCodegen
from dataclasses import dataclass


class ExclusiveJSON(typing.TypedDict):
    kind: typing.Literal["Exclusive"]


@dataclass
class Exclusive:
    discriminator: typing.ClassVar = 0
    def to_json(self) -> ExclusiveJSON:
        return ExclusiveJSON(
            kind="Exclusive",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Exclusive": {},
        }




class InclusiveJSON(typing.TypedDict):
    kind: typing.Literal["Inclusive"]


@dataclass
class Inclusive:
    discriminator: typing.ClassVar = 1
    def to_json(self) -> InclusiveJSON:
        return InclusiveJSON(
            kind="Inclusive",
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
            "Inclusive": {},
        }





FeeCalculationKind = typing.Union[
    Exclusive,
    Inclusive,
]
FeeCalculationJSON = typing.Union[
    ExclusiveJSON,
    InclusiveJSON,
]

def from_decoded(obj: dict) -> FeeCalculationKind:
    if not isinstance(obj, dict):
        raise ValueError("Invalid enum object")
    if "Exclusive" in obj:
      return Exclusive()
    if "Inclusive" in obj:
      return Inclusive()
    raise ValueError("Invalid enum object")

def from_json(obj: FeeCalculationJSON) -> FeeCalculationKind:
    if obj["kind"] == "Exclusive":
        return Exclusive()

    if obj["kind"] == "Inclusive":
        return Inclusive()

    kind = obj["kind"]
    raise ValueError(f"Unrecognized enum kind: {kind}")


layout = EnumForCodegen(
"Exclusive" / borsh.CStruct(),
"Inclusive" / borsh.CStruct(),
)
