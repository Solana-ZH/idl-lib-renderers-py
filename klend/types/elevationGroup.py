'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from construct import Container
from dataclasses import dataclass
from solders.pubkey import Pubkey as SolPubkey

class ElevationGroupJSON(typing.TypedDict):
    maxLiquidationBonusBps: int
    id: int
    ltvPct: int
    liquidationThresholdPct: int
    allowNewLoans: int
    maxReservesAsCollateral: int
    padding0: int
    debtReserve: str
    padding1: list[int]

@dataclass
class ElevationGroup:
    layout: typing.ClassVar = borsh.CStruct(
        "maxLiquidationBonusBps" /borsh.U16,
        "id" /borsh.U8,
        "ltvPct" /borsh.U8,
        "liquidationThresholdPct" /borsh.U8,
        "allowNewLoans" /borsh.U8,
        "maxReservesAsCollateral" /borsh.U8,
        "padding0" /borsh.U8,
        "debtReserve" /BorshPubkey,
        "padding1" /borsh.U64[4],
        )
    #fields
    maxLiquidationBonusBps: int
    id: int
    ltvPct: int
    liquidationThresholdPct: int
    allowNewLoans: int
    maxReservesAsCollateral: int
    padding0: int
    debtReserve: SolPubkey
    padding1: list[int]
    
    @classmethod
    def from_decoded(cls, obj: Container) -> "ElevationGroup":
        return cls(
        maxLiquidationBonusBps=obj["maxLiquidationBonusBps"],
        id=obj["id"],
        ltvPct=obj["ltvPct"],
        liquidationThresholdPct=obj["liquidationThresholdPct"],
        allowNewLoans=obj["allowNewLoans"],
        maxReservesAsCollateral=obj["maxReservesAsCollateral"],
        padding0=obj["padding0"],
        debtReserve=obj["debtReserve"],
        padding1=obj["padding1"],
        )

    def to_encodable(self) -> dict[str, typing.Any]:
        return {
                "maxLiquidationBonusBps": self.maxLiquidationBonusBps,
                "id": self.id,
                "ltvPct": self.ltvPct,
                "liquidationThresholdPct": self.liquidationThresholdPct,
                "allowNewLoans": self.allowNewLoans,
                "maxReservesAsCollateral": self.maxReservesAsCollateral,
                "padding0": self.padding0,
                "debtReserve": self.debtReserve,
                "padding1": self.padding1,
                }

    def to_json(self) -> ElevationGroupJSON:
        return {
                "maxLiquidationBonusBps": self.maxLiquidationBonusBps,
                "id": self.id,
                "ltvPct": self.ltvPct,
                "liquidationThresholdPct": self.liquidationThresholdPct,
                "allowNewLoans": self.allowNewLoans,
                "maxReservesAsCollateral": self.maxReservesAsCollateral,
                "padding0": self.padding0,
                "debtReserve": str(self.debtReserve),
                "padding1": self.padding1,
                }

    @classmethod
    def from_json(cls, obj: ElevationGroupJSON) -> "ElevationGroup":
        return cls(
                maxLiquidationBonusBps=obj["maxLiquidationBonusBps"],
                id=obj["id"],
                ltvPct=obj["ltvPct"],
                liquidationThresholdPct=obj["liquidationThresholdPct"],
                allowNewLoans=obj["allowNewLoans"],
                maxReservesAsCollateral=obj["maxReservesAsCollateral"],
                padding0=obj["padding0"],
                debtReserve=SolPubkey.from_string(obj["debtReserve"]),
                padding1=obj["padding1"],
        )






