'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID


class LendingMarketJSON(typing.TypedDict):
    version: int
    bumpSeed: int
    lendingMarketOwner: str
    lendingMarketOwnerCached: str
    quoteCurrency: list[int]
    referralFeeBps: int
    emergencyMode: int
    autodeleverageEnabled: int
    borrowDisabled: int
    priceRefreshTriggerToMaxAgePct: int
    liquidationMaxDebtCloseFactorPct: int
    insolvencyRiskUnhealthyLtvPct: int
    minFullLiquidationValueThreshold: int
    maxLiquidatableDebtMarketValueAtOnce: int
    reserved0: list[int]
    globalAllowedBorrowValue: int
    riskCouncil: str
    reserved1: list[int]
    elevationGroups: list[types.elevationGroup.ElevationGroupJSON]
    elevationGroupPadding: list[int]
    minNetValueInObligationSf: int
    minValueSkipLiquidationLtvChecks: int
    name: list[int]
    minValueSkipLiquidationBfChecks: int
    individualAutodeleverageMarginCallPeriodSecs: int
    minInitialDepositAmount: int
    obligationOrdersEnabled: int
    padding2: list[int]
    padding1: list[int]

@dataclass
class LendingMarket:
    #fields
    version: int
    bumpSeed: int
    lendingMarketOwner: SolPubkey
    lendingMarketOwnerCached: SolPubkey
    quoteCurrency: list[int]
    referralFeeBps: int
    emergencyMode: int
    autodeleverageEnabled: int
    borrowDisabled: int
    priceRefreshTriggerToMaxAgePct: int
    liquidationMaxDebtCloseFactorPct: int
    insolvencyRiskUnhealthyLtvPct: int
    minFullLiquidationValueThreshold: int
    maxLiquidatableDebtMarketValueAtOnce: int
    reserved0: list[int]
    globalAllowedBorrowValue: int
    riskCouncil: SolPubkey
    reserved1: list[int]
    elevationGroups: list[types.elevationGroup.ElevationGroup]
    elevationGroupPadding: list[int]
    minNetValueInObligationSf: int
    minValueSkipLiquidationLtvChecks: int
    name: list[int]
    minValueSkipLiquidationBfChecks: int
    individualAutodeleverageMarginCallPeriodSecs: int
    minInitialDepositAmount: int
    obligationOrdersEnabled: int
    padding2: list[int]
    padding1: list[int]

    discriminator: typing.ClassVar = b"\xf6\x72\x32\x62\x48\x9d\x1c\x78"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "version" /borsh.U64,
        "bumpSeed" /borsh.U64,
        "lendingMarketOwner" /BorshPubkey,
        "lendingMarketOwnerCached" /BorshPubkey,
        "quoteCurrency" /borsh.U8[32],
        "referralFeeBps" /borsh.U16,
        "emergencyMode" /borsh.U8,
        "autodeleverageEnabled" /borsh.U8,
        "borrowDisabled" /borsh.U8,
        "priceRefreshTriggerToMaxAgePct" /borsh.U8,
        "liquidationMaxDebtCloseFactorPct" /borsh.U8,
        "insolvencyRiskUnhealthyLtvPct" /borsh.U8,
        "minFullLiquidationValueThreshold" /borsh.U64,
        "maxLiquidatableDebtMarketValueAtOnce" /borsh.U64,
        "reserved0" /borsh.U8[8],
        "globalAllowedBorrowValue" /borsh.U64,
        "riskCouncil" /BorshPubkey,
        "reserved1" /borsh.U8[8],
        "elevationGroups" /types.elevationGroup.ElevationGroup.layout[32],
        "elevationGroupPadding" /borsh.U64[90],
        "minNetValueInObligationSf" /borsh.U128,
        "minValueSkipLiquidationLtvChecks" /borsh.U64,
        "name" /borsh.U8[32],
        "minValueSkipLiquidationBfChecks" /borsh.U64,
        "individualAutodeleverageMarginCallPeriodSecs" /borsh.U64,
        "minInitialDepositAmount" /borsh.U64,
        "obligationOrdersEnabled" /borsh.U8,
        "padding2" /borsh.U8[7],
        "padding1" /borsh.U64[169],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["LendingMarket"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["LendingMarket"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["LendingMarket"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "LendingMarket":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = LendingMarket.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                version=dec.version,
                bumpSeed=dec.bumpSeed,
                lendingMarketOwner=dec.lendingMarketOwner,
                lendingMarketOwnerCached=dec.lendingMarketOwnerCached,
                quoteCurrency=dec.quoteCurrency,
                referralFeeBps=dec.referralFeeBps,
                emergencyMode=dec.emergencyMode,
                autodeleverageEnabled=dec.autodeleverageEnabled,
                borrowDisabled=dec.borrowDisabled,
                priceRefreshTriggerToMaxAgePct=dec.priceRefreshTriggerToMaxAgePct,
                liquidationMaxDebtCloseFactorPct=dec.liquidationMaxDebtCloseFactorPct,
                insolvencyRiskUnhealthyLtvPct=dec.insolvencyRiskUnhealthyLtvPct,
                minFullLiquidationValueThreshold=dec.minFullLiquidationValueThreshold,
                maxLiquidatableDebtMarketValueAtOnce=dec.maxLiquidatableDebtMarketValueAtOnce,
                reserved0=dec.reserved0,
                globalAllowedBorrowValue=dec.globalAllowedBorrowValue,
                riskCouncil=dec.riskCouncil,
                reserved1=dec.reserved1,
                elevationGroups=dec.elevationGroups,
                elevationGroupPadding=dec.elevationGroupPadding,
                minNetValueInObligationSf=dec.minNetValueInObligationSf,
                minValueSkipLiquidationLtvChecks=dec.minValueSkipLiquidationLtvChecks,
                name=dec.name,
                minValueSkipLiquidationBfChecks=dec.minValueSkipLiquidationBfChecks,
                individualAutodeleverageMarginCallPeriodSecs=dec.individualAutodeleverageMarginCallPeriodSecs,
                minInitialDepositAmount=dec.minInitialDepositAmount,
                obligationOrdersEnabled=dec.obligationOrdersEnabled,
                padding2=dec.padding2,
                padding1=dec.padding1,
                )

    def to_json(self) -> LendingMarketJSON:
        return {
                "version": self.version,
                "bumpSeed": self.bumpSeed,
                "lendingMarketOwner": str(self.lendingMarketOwner),
                "lendingMarketOwnerCached": str(self.lendingMarketOwnerCached),
                "quoteCurrency": self.quoteCurrency,
                "referralFeeBps": self.referralFeeBps,
                "emergencyMode": self.emergencyMode,
                "autodeleverageEnabled": self.autodeleverageEnabled,
                "borrowDisabled": self.borrowDisabled,
                "priceRefreshTriggerToMaxAgePct": self.priceRefreshTriggerToMaxAgePct,
                "liquidationMaxDebtCloseFactorPct": self.liquidationMaxDebtCloseFactorPct,
                "insolvencyRiskUnhealthyLtvPct": self.insolvencyRiskUnhealthyLtvPct,
                "minFullLiquidationValueThreshold": self.minFullLiquidationValueThreshold,
                "maxLiquidatableDebtMarketValueAtOnce": self.maxLiquidatableDebtMarketValueAtOnce,
                "reserved0": self.reserved0,
                "globalAllowedBorrowValue": self.globalAllowedBorrowValue,
                "riskCouncil": str(self.riskCouncil),
                "reserved1": self.reserved1,
                "elevationGroups": list(map(lambda item:item.to_json(),self.elevationGroups)),
                "elevationGroupPadding": self.elevationGroupPadding,
                "minNetValueInObligationSf": self.minNetValueInObligationSf,
                "minValueSkipLiquidationLtvChecks": self.minValueSkipLiquidationLtvChecks,
                "name": self.name,
                "minValueSkipLiquidationBfChecks": self.minValueSkipLiquidationBfChecks,
                "individualAutodeleverageMarginCallPeriodSecs": self.individualAutodeleverageMarginCallPeriodSecs,
                "minInitialDepositAmount": self.minInitialDepositAmount,
                "obligationOrdersEnabled": self.obligationOrdersEnabled,
                "padding2": self.padding2,
                "padding1": self.padding1,
                }

    @classmethod
    def from_json(cls, obj: LendingMarketJSON) -> "LendingMarket":
        return cls(
                version=obj["version"],
                bumpSeed=obj["bumpSeed"],
                lendingMarketOwner=SolPubkey.from_string(obj["lendingMarketOwner"]),
                lendingMarketOwnerCached=SolPubkey.from_string(obj["lendingMarketOwnerCached"]),
                quoteCurrency=obj["quoteCurrency"],
                referralFeeBps=obj["referralFeeBps"],
                emergencyMode=obj["emergencyMode"],
                autodeleverageEnabled=obj["autodeleverageEnabled"],
                borrowDisabled=obj["borrowDisabled"],
                priceRefreshTriggerToMaxAgePct=obj["priceRefreshTriggerToMaxAgePct"],
                liquidationMaxDebtCloseFactorPct=obj["liquidationMaxDebtCloseFactorPct"],
                insolvencyRiskUnhealthyLtvPct=obj["insolvencyRiskUnhealthyLtvPct"],
                minFullLiquidationValueThreshold=obj["minFullLiquidationValueThreshold"],
                maxLiquidatableDebtMarketValueAtOnce=obj["maxLiquidatableDebtMarketValueAtOnce"],
                reserved0=obj["reserved0"],
                globalAllowedBorrowValue=obj["globalAllowedBorrowValue"],
                riskCouncil=SolPubkey.from_string(obj["riskCouncil"]),
                reserved1=obj["reserved1"],
                elevationGroups=list(map(lambda item:types.elevationGroup.ElevationGroup.from_json(item),obj["elevationGroups"])),
                elevationGroupPadding=obj["elevationGroupPadding"],
                minNetValueInObligationSf=obj["minNetValueInObligationSf"],
                minValueSkipLiquidationLtvChecks=obj["minValueSkipLiquidationLtvChecks"],
                name=obj["name"],
                minValueSkipLiquidationBfChecks=obj["minValueSkipLiquidationBfChecks"],
                individualAutodeleverageMarginCallPeriodSecs=obj["individualAutodeleverageMarginCallPeriodSecs"],
                minInitialDepositAmount=obj["minInitialDepositAmount"],
                obligationOrdersEnabled=obj["obligationOrdersEnabled"],
                padding2=obj["padding2"],
                padding1=obj["padding1"],
                )




