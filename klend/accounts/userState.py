'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID


class UserStateJSON(typing.TypedDict):
    userId: int
    farmState: str
    owner: str
    isFarmDelegated: int
    padding0: list[int]
    rewardsTallyScaled: list[int]
    rewardsIssuedUnclaimed: list[int]
    lastClaimTs: list[int]
    activeStakeScaled: int
    pendingDepositStakeScaled: int
    pendingDepositStakeTs: int
    pendingWithdrawalUnstakeScaled: int
    pendingWithdrawalUnstakeTs: int
    bump: int
    delegatee: str
    lastStakeTs: int
    padding1: list[int]

@dataclass
class UserState:
    #fields
    userId: int
    farmState: SolPubkey
    owner: SolPubkey
    isFarmDelegated: int
    padding0: list[int]
    rewardsTallyScaled: list[int]
    rewardsIssuedUnclaimed: list[int]
    lastClaimTs: list[int]
    activeStakeScaled: int
    pendingDepositStakeScaled: int
    pendingDepositStakeTs: int
    pendingWithdrawalUnstakeScaled: int
    pendingWithdrawalUnstakeTs: int
    bump: int
    delegatee: SolPubkey
    lastStakeTs: int
    padding1: list[int]

    discriminator: typing.ClassVar = b"\x48\xb1\x55\xf9\x4c\xa7\xba\x7e"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "userId" /borsh.U64,
        "farmState" /BorshPubkey,
        "owner" /BorshPubkey,
        "isFarmDelegated" /borsh.U8,
        "padding0" /borsh.U8[7],
        "rewardsTallyScaled" /borsh.U128[10],
        "rewardsIssuedUnclaimed" /borsh.U64[10],
        "lastClaimTs" /borsh.U64[10],
        "activeStakeScaled" /borsh.U128,
        "pendingDepositStakeScaled" /borsh.U128,
        "pendingDepositStakeTs" /borsh.U64,
        "pendingWithdrawalUnstakeScaled" /borsh.U128,
        "pendingWithdrawalUnstakeTs" /borsh.U64,
        "bump" /borsh.U64,
        "delegatee" /BorshPubkey,
        "lastStakeTs" /borsh.U64,
        "padding1" /borsh.U64[50],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["UserState"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["UserState"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["UserState"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "UserState":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = UserState.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                userId=dec.userId,
                farmState=dec.farmState,
                owner=dec.owner,
                isFarmDelegated=dec.isFarmDelegated,
                padding0=dec.padding0,
                rewardsTallyScaled=dec.rewardsTallyScaled,
                rewardsIssuedUnclaimed=dec.rewardsIssuedUnclaimed,
                lastClaimTs=dec.lastClaimTs,
                activeStakeScaled=dec.activeStakeScaled,
                pendingDepositStakeScaled=dec.pendingDepositStakeScaled,
                pendingDepositStakeTs=dec.pendingDepositStakeTs,
                pendingWithdrawalUnstakeScaled=dec.pendingWithdrawalUnstakeScaled,
                pendingWithdrawalUnstakeTs=dec.pendingWithdrawalUnstakeTs,
                bump=dec.bump,
                delegatee=dec.delegatee,
                lastStakeTs=dec.lastStakeTs,
                padding1=dec.padding1,
                )

    def to_json(self) -> UserStateJSON:
        return {
                "userId": self.userId,
                "farmState": str(self.farmState),
                "owner": str(self.owner),
                "isFarmDelegated": self.isFarmDelegated,
                "padding0": self.padding0,
                "rewardsTallyScaled": self.rewardsTallyScaled,
                "rewardsIssuedUnclaimed": self.rewardsIssuedUnclaimed,
                "lastClaimTs": self.lastClaimTs,
                "activeStakeScaled": self.activeStakeScaled,
                "pendingDepositStakeScaled": self.pendingDepositStakeScaled,
                "pendingDepositStakeTs": self.pendingDepositStakeTs,
                "pendingWithdrawalUnstakeScaled": self.pendingWithdrawalUnstakeScaled,
                "pendingWithdrawalUnstakeTs": self.pendingWithdrawalUnstakeTs,
                "bump": self.bump,
                "delegatee": str(self.delegatee),
                "lastStakeTs": self.lastStakeTs,
                "padding1": self.padding1,
                }

    @classmethod
    def from_json(cls, obj: UserStateJSON) -> "UserState":
        return cls(
                userId=obj["userId"],
                farmState=SolPubkey.from_string(obj["farmState"]),
                owner=SolPubkey.from_string(obj["owner"]),
                isFarmDelegated=obj["isFarmDelegated"],
                padding0=obj["padding0"],
                rewardsTallyScaled=obj["rewardsTallyScaled"],
                rewardsIssuedUnclaimed=obj["rewardsIssuedUnclaimed"],
                lastClaimTs=obj["lastClaimTs"],
                activeStakeScaled=obj["activeStakeScaled"],
                pendingDepositStakeScaled=obj["pendingDepositStakeScaled"],
                pendingDepositStakeTs=obj["pendingDepositStakeTs"],
                pendingWithdrawalUnstakeScaled=obj["pendingWithdrawalUnstakeScaled"],
                pendingWithdrawalUnstakeTs=obj["pendingWithdrawalUnstakeTs"],
                bump=obj["bump"],
                delegatee=SolPubkey.from_string(obj["delegatee"]),
                lastStakeTs=obj["lastStakeTs"],
                padding1=obj["padding1"],
                )




