'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID


class ReferrerTokenStateJSON(typing.TypedDict):
    referrer: str
    mint: str
    amountUnclaimedSf: int
    amountCumulativeSf: int
    bump: int
    padding: list[int]

@dataclass
class ReferrerTokenState:
    #fields
    referrer: SolPubkey
    mint: SolPubkey
    amountUnclaimedSf: int
    amountCumulativeSf: int
    bump: int
    padding: list[int]

    discriminator: typing.ClassVar = b"\x27\x0f\xd0\x4d\x20\xc3\x69\x38"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "referrer" /BorshPubkey,
        "mint" /BorshPubkey,
        "amountUnclaimedSf" /borsh.U128,
        "amountCumulativeSf" /borsh.U128,
        "bump" /borsh.U64,
        "padding" /borsh.U64[31],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["ReferrerTokenState"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["ReferrerTokenState"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["ReferrerTokenState"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "ReferrerTokenState":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = ReferrerTokenState.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                referrer=dec.referrer,
                mint=dec.mint,
                amountUnclaimedSf=dec.amountUnclaimedSf,
                amountCumulativeSf=dec.amountCumulativeSf,
                bump=dec.bump,
                padding=dec.padding,
                )

    def to_json(self) -> ReferrerTokenStateJSON:
        return {
                "referrer": str(self.referrer),
                "mint": str(self.mint),
                "amountUnclaimedSf": self.amountUnclaimedSf,
                "amountCumulativeSf": self.amountCumulativeSf,
                "bump": self.bump,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: ReferrerTokenStateJSON) -> "ReferrerTokenState":
        return cls(
                referrer=SolPubkey.from_string(obj["referrer"]),
                mint=SolPubkey.from_string(obj["mint"]),
                amountUnclaimedSf=obj["amountUnclaimedSf"],
                amountCumulativeSf=obj["amountCumulativeSf"],
                bump=obj["bump"],
                padding=obj["padding"],
                )




