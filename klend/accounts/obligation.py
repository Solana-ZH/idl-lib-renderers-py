'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID


class ObligationJSON(typing.TypedDict):
    tag: int
    lastUpdate: types.lastUpdate.LastUpdateJSON
    lendingMarket: str
    owner: str
    deposits: list[types.obligationCollateral.ObligationCollateralJSON]
    lowestReserveDepositLiquidationLtv: int
    depositedValueSf: int
    borrows: list[types.obligationLiquidity.ObligationLiquidityJSON]
    borrowFactorAdjustedDebtValueSf: int
    borrowedAssetsMarketValueSf: int
    allowedBorrowValueSf: int
    unhealthyBorrowValueSf: int
    depositsAssetTiers: list[int]
    borrowsAssetTiers: list[int]
    elevationGroup: int
    numOfObsoleteDepositReserves: int
    hasDebt: int
    referrer: str
    borrowingDisabled: int
    autodeleverageTargetLtvPct: int
    lowestReserveDepositMaxLtvPct: int
    numOfObsoleteBorrowReserves: int
    reserved: list[int]
    highestBorrowFactorPct: int
    autodeleverageMarginCallStartedTimestamp: int
    orders: list[types.obligationOrder.ObligationOrderJSON]
    padding3: list[int]

@dataclass
class Obligation:
    #fields
    tag: int
    lastUpdate: types.lastUpdate.LastUpdate
    lendingMarket: SolPubkey
    owner: SolPubkey
    deposits: list[types.obligationCollateral.ObligationCollateral]
    lowestReserveDepositLiquidationLtv: int
    depositedValueSf: int
    borrows: list[types.obligationLiquidity.ObligationLiquidity]
    borrowFactorAdjustedDebtValueSf: int
    borrowedAssetsMarketValueSf: int
    allowedBorrowValueSf: int
    unhealthyBorrowValueSf: int
    depositsAssetTiers: list[int]
    borrowsAssetTiers: list[int]
    elevationGroup: int
    numOfObsoleteDepositReserves: int
    hasDebt: int
    referrer: SolPubkey
    borrowingDisabled: int
    autodeleverageTargetLtvPct: int
    lowestReserveDepositMaxLtvPct: int
    numOfObsoleteBorrowReserves: int
    reserved: list[int]
    highestBorrowFactorPct: int
    autodeleverageMarginCallStartedTimestamp: int
    orders: list[types.obligationOrder.ObligationOrder]
    padding3: list[int]

    discriminator: typing.ClassVar = b"\xa8\xce\x8d\x6a\x58\x4c\xac\xa7"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "tag" /borsh.U64,
        "lastUpdate" /types.lastUpdate.LastUpdate.layout,
        "lendingMarket" /BorshPubkey,
        "owner" /BorshPubkey,
        "deposits" /types.obligationCollateral.ObligationCollateral.layout[8],
        "lowestReserveDepositLiquidationLtv" /borsh.U64,
        "depositedValueSf" /borsh.U128,
        "borrows" /types.obligationLiquidity.ObligationLiquidity.layout[5],
        "borrowFactorAdjustedDebtValueSf" /borsh.U128,
        "borrowedAssetsMarketValueSf" /borsh.U128,
        "allowedBorrowValueSf" /borsh.U128,
        "unhealthyBorrowValueSf" /borsh.U128,
        "depositsAssetTiers" /borsh.U8[8],
        "borrowsAssetTiers" /borsh.U8[5],
        "elevationGroup" /borsh.U8,
        "numOfObsoleteDepositReserves" /borsh.U8,
        "hasDebt" /borsh.U8,
        "referrer" /BorshPubkey,
        "borrowingDisabled" /borsh.U8,
        "autodeleverageTargetLtvPct" /borsh.U8,
        "lowestReserveDepositMaxLtvPct" /borsh.U8,
        "numOfObsoleteBorrowReserves" /borsh.U8,
        "reserved" /borsh.U8[4],
        "highestBorrowFactorPct" /borsh.U64,
        "autodeleverageMarginCallStartedTimestamp" /borsh.U64,
        "orders" /types.obligationOrder.ObligationOrder.layout[2],
        "padding3" /borsh.U64[93],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Obligation"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Obligation"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Obligation"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Obligation":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = Obligation.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                tag=dec.tag,
                lastUpdate=types.lastUpdate.LastUpdate.from_decoded(dec.lastUpdate),
                lendingMarket=dec.lendingMarket,
                owner=dec.owner,
                deposits=dec.deposits,
                lowestReserveDepositLiquidationLtv=dec.lowestReserveDepositLiquidationLtv,
                depositedValueSf=dec.depositedValueSf,
                borrows=dec.borrows,
                borrowFactorAdjustedDebtValueSf=dec.borrowFactorAdjustedDebtValueSf,
                borrowedAssetsMarketValueSf=dec.borrowedAssetsMarketValueSf,
                allowedBorrowValueSf=dec.allowedBorrowValueSf,
                unhealthyBorrowValueSf=dec.unhealthyBorrowValueSf,
                depositsAssetTiers=dec.depositsAssetTiers,
                borrowsAssetTiers=dec.borrowsAssetTiers,
                elevationGroup=dec.elevationGroup,
                numOfObsoleteDepositReserves=dec.numOfObsoleteDepositReserves,
                hasDebt=dec.hasDebt,
                referrer=dec.referrer,
                borrowingDisabled=dec.borrowingDisabled,
                autodeleverageTargetLtvPct=dec.autodeleverageTargetLtvPct,
                lowestReserveDepositMaxLtvPct=dec.lowestReserveDepositMaxLtvPct,
                numOfObsoleteBorrowReserves=dec.numOfObsoleteBorrowReserves,
                reserved=dec.reserved,
                highestBorrowFactorPct=dec.highestBorrowFactorPct,
                autodeleverageMarginCallStartedTimestamp=dec.autodeleverageMarginCallStartedTimestamp,
                orders=dec.orders,
                padding3=dec.padding3,
                )

    def to_json(self) -> ObligationJSON:
        return {
                "tag": self.tag,
                "lastUpdate": self.lastUpdate.to_json(),
                "lendingMarket": str(self.lendingMarket),
                "owner": str(self.owner),
                "deposits": list(map(lambda item:item.to_json(),self.deposits)),
                "lowestReserveDepositLiquidationLtv": self.lowestReserveDepositLiquidationLtv,
                "depositedValueSf": self.depositedValueSf,
                "borrows": list(map(lambda item:item.to_json(),self.borrows)),
                "borrowFactorAdjustedDebtValueSf": self.borrowFactorAdjustedDebtValueSf,
                "borrowedAssetsMarketValueSf": self.borrowedAssetsMarketValueSf,
                "allowedBorrowValueSf": self.allowedBorrowValueSf,
                "unhealthyBorrowValueSf": self.unhealthyBorrowValueSf,
                "depositsAssetTiers": self.depositsAssetTiers,
                "borrowsAssetTiers": self.borrowsAssetTiers,
                "elevationGroup": self.elevationGroup,
                "numOfObsoleteDepositReserves": self.numOfObsoleteDepositReserves,
                "hasDebt": self.hasDebt,
                "referrer": str(self.referrer),
                "borrowingDisabled": self.borrowingDisabled,
                "autodeleverageTargetLtvPct": self.autodeleverageTargetLtvPct,
                "lowestReserveDepositMaxLtvPct": self.lowestReserveDepositMaxLtvPct,
                "numOfObsoleteBorrowReserves": self.numOfObsoleteBorrowReserves,
                "reserved": self.reserved,
                "highestBorrowFactorPct": self.highestBorrowFactorPct,
                "autodeleverageMarginCallStartedTimestamp": self.autodeleverageMarginCallStartedTimestamp,
                "orders": list(map(lambda item:item.to_json(),self.orders)),
                "padding3": self.padding3,
                }

    @classmethod
    def from_json(cls, obj: ObligationJSON) -> "Obligation":
        return cls(
                tag=obj["tag"],
                lastUpdate=types.lastUpdate.LastUpdate.from_json(obj["lastUpdate"]),
                lendingMarket=SolPubkey.from_string(obj["lendingMarket"]),
                owner=SolPubkey.from_string(obj["owner"]),
                deposits=list(map(lambda item:types.obligationCollateral.ObligationCollateral.from_json(item),obj["deposits"])),
                lowestReserveDepositLiquidationLtv=obj["lowestReserveDepositLiquidationLtv"],
                depositedValueSf=obj["depositedValueSf"],
                borrows=list(map(lambda item:types.obligationLiquidity.ObligationLiquidity.from_json(item),obj["borrows"])),
                borrowFactorAdjustedDebtValueSf=obj["borrowFactorAdjustedDebtValueSf"],
                borrowedAssetsMarketValueSf=obj["borrowedAssetsMarketValueSf"],
                allowedBorrowValueSf=obj["allowedBorrowValueSf"],
                unhealthyBorrowValueSf=obj["unhealthyBorrowValueSf"],
                depositsAssetTiers=obj["depositsAssetTiers"],
                borrowsAssetTiers=obj["borrowsAssetTiers"],
                elevationGroup=obj["elevationGroup"],
                numOfObsoleteDepositReserves=obj["numOfObsoleteDepositReserves"],
                hasDebt=obj["hasDebt"],
                referrer=SolPubkey.from_string(obj["referrer"]),
                borrowingDisabled=obj["borrowingDisabled"],
                autodeleverageTargetLtvPct=obj["autodeleverageTargetLtvPct"],
                lowestReserveDepositMaxLtvPct=obj["lowestReserveDepositMaxLtvPct"],
                numOfObsoleteBorrowReserves=obj["numOfObsoleteBorrowReserves"],
                reserved=obj["reserved"],
                highestBorrowFactorPct=obj["highestBorrowFactorPct"],
                autodeleverageMarginCallStartedTimestamp=obj["autodeleverageMarginCallStartedTimestamp"],
                orders=list(map(lambda item:types.obligationOrder.ObligationOrder.from_json(item),obj["orders"])),
                padding3=obj["padding3"],
                )




