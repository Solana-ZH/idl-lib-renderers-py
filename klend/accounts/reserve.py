'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID


class ReserveJSON(typing.TypedDict):
    version: int
    lastUpdate: types.lastUpdate.LastUpdateJSON
    lendingMarket: str
    farmCollateral: str
    farmDebt: str
    liquidity: types.reserveLiquidity.ReserveLiquidityJSON
    reserveLiquidityPadding: list[int]
    collateral: types.reserveCollateral.ReserveCollateralJSON
    reserveCollateralPadding: list[int]
    config: types.reserveConfig.ReserveConfigJSON
    configPadding: list[int]
    borrowedAmountOutsideElevationGroup: int
    borrowedAmountsAgainstThisReserveInElevationGroups: list[int]
    padding: list[int]

@dataclass
class Reserve:
    #fields
    version: int
    lastUpdate: types.lastUpdate.LastUpdate
    lendingMarket: SolPubkey
    farmCollateral: SolPubkey
    farmDebt: SolPubkey
    liquidity: types.reserveLiquidity.ReserveLiquidity
    reserveLiquidityPadding: list[int]
    collateral: types.reserveCollateral.ReserveCollateral
    reserveCollateralPadding: list[int]
    config: types.reserveConfig.ReserveConfig
    configPadding: list[int]
    borrowedAmountOutsideElevationGroup: int
    borrowedAmountsAgainstThisReserveInElevationGroups: list[int]
    padding: list[int]

    discriminator: typing.ClassVar = b"\x2b\xf2\xcc\xca\x1a\xf7\x3b\x7f"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "version" /borsh.U64,
        "lastUpdate" /types.lastUpdate.LastUpdate.layout,
        "lendingMarket" /BorshPubkey,
        "farmCollateral" /BorshPubkey,
        "farmDebt" /BorshPubkey,
        "liquidity" /types.reserveLiquidity.ReserveLiquidity.layout,
        "reserveLiquidityPadding" /borsh.U64[150],
        "collateral" /types.reserveCollateral.ReserveCollateral.layout,
        "reserveCollateralPadding" /borsh.U64[150],
        "config" /types.reserveConfig.ReserveConfig.layout,
        "configPadding" /borsh.U64[116],
        "borrowedAmountOutsideElevationGroup" /borsh.U64,
        "borrowedAmountsAgainstThisReserveInElevationGroups" /borsh.U64[32],
        "padding" /borsh.U64[207],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["Reserve"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["Reserve"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["Reserve"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "Reserve":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = Reserve.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                version=dec.version,
                lastUpdate=types.lastUpdate.LastUpdate.from_decoded(dec.lastUpdate),
                lendingMarket=dec.lendingMarket,
                farmCollateral=dec.farmCollateral,
                farmDebt=dec.farmDebt,
                liquidity=types.reserveLiquidity.ReserveLiquidity.from_decoded(dec.liquidity),
                reserveLiquidityPadding=dec.reserveLiquidityPadding,
                collateral=types.reserveCollateral.ReserveCollateral.from_decoded(dec.collateral),
                reserveCollateralPadding=dec.reserveCollateralPadding,
                config=types.reserveConfig.ReserveConfig.from_decoded(dec.config),
                configPadding=dec.configPadding,
                borrowedAmountOutsideElevationGroup=dec.borrowedAmountOutsideElevationGroup,
                borrowedAmountsAgainstThisReserveInElevationGroups=dec.borrowedAmountsAgainstThisReserveInElevationGroups,
                padding=dec.padding,
                )

    def to_json(self) -> ReserveJSON:
        return {
                "version": self.version,
                "lastUpdate": self.lastUpdate.to_json(),
                "lendingMarket": str(self.lendingMarket),
                "farmCollateral": str(self.farmCollateral),
                "farmDebt": str(self.farmDebt),
                "liquidity": self.liquidity.to_json(),
                "reserveLiquidityPadding": self.reserveLiquidityPadding,
                "collateral": self.collateral.to_json(),
                "reserveCollateralPadding": self.reserveCollateralPadding,
                "config": self.config.to_json(),
                "configPadding": self.configPadding,
                "borrowedAmountOutsideElevationGroup": self.borrowedAmountOutsideElevationGroup,
                "borrowedAmountsAgainstThisReserveInElevationGroups": self.borrowedAmountsAgainstThisReserveInElevationGroups,
                "padding": self.padding,
                }

    @classmethod
    def from_json(cls, obj: ReserveJSON) -> "Reserve":
        return cls(
                version=obj["version"],
                lastUpdate=types.lastUpdate.LastUpdate.from_json(obj["lastUpdate"]),
                lendingMarket=SolPubkey.from_string(obj["lendingMarket"]),
                farmCollateral=SolPubkey.from_string(obj["farmCollateral"]),
                farmDebt=SolPubkey.from_string(obj["farmDebt"]),
                liquidity=types.reserveLiquidity.ReserveLiquidity.from_json(obj["liquidity"]),
                reserveLiquidityPadding=obj["reserveLiquidityPadding"],
                collateral=types.reserveCollateral.ReserveCollateral.from_json(obj["collateral"]),
                reserveCollateralPadding=obj["reserveCollateralPadding"],
                config=types.reserveConfig.ReserveConfig.from_json(obj["config"]),
                configPadding=obj["configPadding"],
                borrowedAmountOutsideElevationGroup=obj["borrowedAmountOutsideElevationGroup"],
                borrowedAmountsAgainstThisReserveInElevationGroups=obj["borrowedAmountsAgainstThisReserveInElevationGroups"],
                padding=obj["padding"],
                )




