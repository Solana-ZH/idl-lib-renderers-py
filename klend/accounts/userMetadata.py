'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from anchorpy.borsh_extension import BorshPubkey
from anchorpy.error import AccountInvalidDiscriminator
from anchorpy.utils.rpc import get_multiple_accounts
from dataclasses import dataclass
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Commitment
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID


class UserMetadataJSON(typing.TypedDict):
    referrer: str
    bump: int
    userLookupTable: str
    owner: str
    padding1: list[int]
    padding2: list[int]

@dataclass
class UserMetadata:
    #fields
    referrer: SolPubkey
    bump: int
    userLookupTable: SolPubkey
    owner: SolPubkey
    padding1: list[int]
    padding2: list[int]

    discriminator: typing.ClassVar = b"\x9d\xd6\xdc\xeb\x62\x87\xab\x1c"
    DISCRIMINATOR_SIZE: int = 8

    layout: typing.ClassVar = borsh.CStruct(
        "referrer" /BorshPubkey,
        "bump" /borsh.U64,
        "userLookupTable" /BorshPubkey,
        "owner" /BorshPubkey,
        "padding1" /borsh.U64[51],
        "padding2" /borsh.U64[64],
        )



    @classmethod
    async def fetch(
        cls,
        conn: AsyncClient,
        address: SolPubkey,
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.Optional["UserMetadata"]:
        resp = await conn.get_account_info(address, commitment=commitment)
        info = resp.value
        if info is None:
            return None
        if info.owner != program_id:
            raise ValueError("Account does not belong to this program")
        bytes_data = info.data
        return cls.decode(bytes_data)

    @classmethod
    async def fetch_multiple(
        cls,
        conn: AsyncClient,
        addresses: list[SolPubkey],
        commitment: typing.Optional[Commitment] = None,
        program_id: SolPubkey = PROGRAM_ID,
    ) -> typing.List[typing.Optional["UserMetadata"]]:
        infos = await get_multiple_accounts(conn, addresses, commitment=commitment)
        res: typing.List[typing.Optional["UserMetadata"]] = []
        for info in infos:
            if info is None:
                res.append(None)
                continue
            if info.account.owner != program_id:
                raise ValueError("Account does not belong to this program")
            res.append(cls.decode(info.account.data))
        return res

    @classmethod
    def decode(cls, data: bytes) -> "UserMetadata":
        if data[:cls.DISCRIMINATOR_SIZE] != cls.discriminator:
            raise AccountInvalidDiscriminator(
                "The discriminator for this account is invalid"
            )
        dec = UserMetadata.layout.parse(data[cls.DISCRIMINATOR_SIZE:])
        return cls(
                referrer=dec.referrer,
                bump=dec.bump,
                userLookupTable=dec.userLookupTable,
                owner=dec.owner,
                padding1=dec.padding1,
                padding2=dec.padding2,
                )

    def to_json(self) -> UserMetadataJSON:
        return {
                "referrer": str(self.referrer),
                "bump": self.bump,
                "userLookupTable": str(self.userLookupTable),
                "owner": str(self.owner),
                "padding1": self.padding1,
                "padding2": self.padding2,
                }

    @classmethod
    def from_json(cls, obj: UserMetadataJSON) -> "UserMetadata":
        return cls(
                referrer=SolPubkey.from_string(obj["referrer"]),
                bump=obj["bump"],
                userLookupTable=SolPubkey.from_string(obj["userLookupTable"]),
                owner=SolPubkey.from_string(obj["owner"]),
                padding1=obj["padding1"],
                padding2=obj["padding2"],
                )




