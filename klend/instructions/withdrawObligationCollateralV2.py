'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class WithdrawObligationCollateralV2Args(typing.TypedDict):
    collateralAmount:int


layout = borsh.CStruct(
    "collateralAmount" /borsh.U64,
    )


class WithdrawObligationCollateralV2Accounts(typing.TypedDict):
    owner:SolPubkey
    obligation:SolPubkey
    lendingMarket:SolPubkey
    lendingMarketAuthority:SolPubkey
    withdrawReserve:SolPubkey
    reserveSourceCollateral:SolPubkey
    userDestinationCollateral:SolPubkey
    tokenProgram:SolPubkey
    instructionSysvarAccount:SolPubkey
    obligationFarmUserState:SolPubkey
    reserveFarmState:SolPubkey
    farmsProgram:SolPubkey

def WithdrawObligationCollateralV2(
    args: WithdrawObligationCollateralV2Args,
    accounts: WithdrawObligationCollateralV2Accounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["owner"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["obligation"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarketAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["withdrawReserve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["reserveSourceCollateral"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userDestinationCollateral"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructionSysvarAccount"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["obligationFarmUserState"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["reserveFarmState"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["farmsProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xca\xf9\x75\x72\xe7\xc0\x2f\x8a"
    encoded_args = layout.build({
        "collateralAmount":args["collateralAmount"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






