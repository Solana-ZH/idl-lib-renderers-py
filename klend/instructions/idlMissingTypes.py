'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from .. import types
from ..program_id import PROGRAM_ID
class IdlMissingTypesArgs(typing.TypedDict):
    reserveFarmKind:types.reserveFarmKind.ReserveFarmKindKind
    assetTier:types.assetTier.AssetTierKind
    feeCalculation:types.feeCalculation.FeeCalculationKind
    reserveStatus:types.reserveStatus.ReserveStatusKind
    updateConfigMode:types.updateConfigMode.UpdateConfigModeKind
    updateLendingMarketConfigValue:types.updateLendingMarketConfigValue.UpdateLendingMarketConfigValueKind
    updateLendingMarketConfigMode:types.updateLendingMarketMode.UpdateLendingMarketModeKind


layout = borsh.CStruct(
    "reserveFarmKind" /types.reserveFarmKind.layout,
    "assetTier" /types.assetTier.layout,
    "feeCalculation" /types.feeCalculation.layout,
    "reserveStatus" /types.reserveStatus.layout,
    "updateConfigMode" /types.updateConfigMode.layout,
    "updateLendingMarketConfigValue" /types.updateLendingMarketConfigValue.layout,
    "updateLendingMarketConfigMode" /types.updateLendingMarketMode.layout,
    )


class IdlMissingTypesAccounts(typing.TypedDict):
    lendingMarketOwner:SolPubkey
    lendingMarket:SolPubkey
    reserve:SolPubkey

def IdlMissingTypes(
    args: IdlMissingTypesArgs,
    accounts: IdlMissingTypesAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["lendingMarketOwner"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["reserve"], is_signer=False, is_writable=True),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x82\x50\x26\x99\x50\xd4\xb6\xfd"
    encoded_args = layout.build({
        "reserveFarmKind":args["reserveFarmKind"].to_encodable(),
        "assetTier":args["assetTier"].to_encodable(),
        "feeCalculation":args["feeCalculation"].to_encodable(),
        "reserveStatus":args["reserveStatus"].to_encodable(),
        "updateConfigMode":args["updateConfigMode"].to_encodable(),
        "updateLendingMarketConfigValue":args["updateLendingMarketConfigValue"].to_encodable(),
        "updateLendingMarketConfigMode":args["updateLendingMarketConfigMode"].to_encodable(),
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)



