'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class RefreshObligationFarmsForReserveArgs(typing.TypedDict):
    mode:int


layout = borsh.CStruct(
    "mode" /borsh.U8,
    )


class RefreshObligationFarmsForReserveAccounts(typing.TypedDict):
    crank:SolPubkey
    obligation:SolPubkey
    lendingMarketAuthority:SolPubkey
    reserve:SolPubkey
    reserveFarmState:SolPubkey
    obligationFarmUserState:SolPubkey
    lendingMarket:SolPubkey
    farmsProgram:SolPubkey
    rent:SolPubkey
    systemProgram:SolPubkey

def RefreshObligationFarmsForReserve(
    args: RefreshObligationFarmsForReserveArgs,
    accounts: RefreshObligationFarmsForReserveAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["crank"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["obligation"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarketAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["reserve"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["reserveFarmState"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["obligationFarmUserState"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["farmsProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x8c\x90\xfd\x15\x0a\x4a\xf8\x03"
    encoded_args = layout.build({
        "mode":args["mode"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)






