'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class LiquidateObligationAndRedeemReserveCollateralArgs(typing.TypedDict):
    liquidityAmount:int
    minAcceptableReceivedLiquidityAmount:int
    maxAllowedLtvOverridePercent:int


layout = borsh.CStruct(
    "liquidityAmount" /borsh.U64,
    "minAcceptableReceivedLiquidityAmount" /borsh.U64,
    "maxAllowedLtvOverridePercent" /borsh.U64,
    )


class LiquidateObligationAndRedeemReserveCollateralAccounts(typing.TypedDict):
    liquidator:SolPubkey
    obligation:SolPubkey
    lendingMarket:SolPubkey
    lendingMarketAuthority:SolPubkey
    repayReserve:SolPubkey
    repayReserveLiquidityMint:SolPubkey
    repayReserveLiquiditySupply:SolPubkey
    withdrawReserve:SolPubkey
    withdrawReserveLiquidityMint:SolPubkey
    withdrawReserveCollateralMint:SolPubkey
    withdrawReserveCollateralSupply:SolPubkey
    withdrawReserveLiquiditySupply:SolPubkey
    withdrawReserveLiquidityFeeReceiver:SolPubkey
    userSourceLiquidity:SolPubkey
    userDestinationCollateral:SolPubkey
    userDestinationLiquidity:SolPubkey
    collateralTokenProgram:SolPubkey
    repayLiquidityTokenProgram:SolPubkey
    withdrawLiquidityTokenProgram:SolPubkey
    instructionSysvarAccount:SolPubkey

def LiquidateObligationAndRedeemReserveCollateral(
    args: LiquidateObligationAndRedeemReserveCollateralArgs,
    accounts: LiquidateObligationAndRedeemReserveCollateralAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["liquidator"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["obligation"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarketAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["repayReserve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["repayReserveLiquidityMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["repayReserveLiquiditySupply"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["withdrawReserve"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["withdrawReserveLiquidityMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["withdrawReserveCollateralMint"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["withdrawReserveCollateralSupply"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["withdrawReserveLiquiditySupply"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["withdrawReserveLiquidityFeeReceiver"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userSourceLiquidity"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userDestinationCollateral"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["userDestinationLiquidity"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["collateralTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["repayLiquidityTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["withdrawLiquidityTokenProgram"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["instructionSysvarAccount"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xb1\x47\x9a\xbc\xe2\x85\x4a\x37"
    encoded_args = layout.build({
        "liquidityAmount":args["liquidityAmount"],
        "minAcceptableReceivedLiquidityAmount":args["minAcceptableReceivedLiquidityAmount"],
        "maxAllowedLtvOverridePercent":args["maxAllowedLtvOverridePercent"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




