'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class WithdrawProtocolFeeArgs(typing.TypedDict):
    amount:int


layout = borsh.CStruct(
    "amount" /borsh.U64,
    )


class WithdrawProtocolFeeAccounts(typing.TypedDict):
    lendingMarketOwner:SolPubkey
    lendingMarket:SolPubkey
    reserve:SolPubkey
    reserveLiquidityMint:SolPubkey
    lendingMarketAuthority:SolPubkey
    feeVault:SolPubkey
    lendingMarketOwnerAta:SolPubkey
    tokenProgram:SolPubkey

def WithdrawProtocolFee(
    args: WithdrawProtocolFeeArgs,
    accounts: WithdrawProtocolFeeAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["lendingMarketOwner"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["reserve"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["reserveLiquidityMint"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["lendingMarketAuthority"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["feeVault"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["lendingMarketOwnerAta"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["tokenProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\x9e\xc9\x9e\xbd\x21\x5d\xa2\x67"
    encoded_args = layout.build({
        "amount":args["amount"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)




