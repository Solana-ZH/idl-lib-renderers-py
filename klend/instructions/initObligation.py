'''
    This code was AUTOGENERATED using the codama library.
    Please DO NOT EDIT THIS FILE, instead use visitors
    to add features, then rerun codama to update it.
    @see https://github.com/codama-idl/codama
'''

import borsh_construct as borsh
import typing
from solders.instruction import AccountMeta, Instruction
from solders.pubkey import Pubkey as SolPubkey
from ..program_id import PROGRAM_ID
class InitObligationArgs(typing.TypedDict):
    tag:int
    id:int


layout = borsh.CStruct(
    "tag" /borsh.U8,
    "id" /borsh.U8,
    )


class InitObligationAccounts(typing.TypedDict):
    obligationOwner:SolPubkey
    feePayer:SolPubkey
    obligation:SolPubkey
    lendingMarket:SolPubkey
    seed1Account:SolPubkey
    seed2Account:SolPubkey
    ownerUserMetadata:SolPubkey
    rent:SolPubkey
    systemProgram:SolPubkey

def InitObligation(
    args: InitObligationArgs,
    accounts: InitObligationAccounts,
    program_id: SolPubkey = PROGRAM_ID,
    remaining_accounts: typing.Optional[typing.List[AccountMeta]] = None,
) ->Instruction:
    keys: list[AccountMeta] = [
    AccountMeta(pubkey=accounts["obligationOwner"], is_signer=True, is_writable=False),
    AccountMeta(pubkey=accounts["feePayer"], is_signer=True, is_writable=True),
    AccountMeta(pubkey=accounts["obligation"], is_signer=False, is_writable=True),
    AccountMeta(pubkey=accounts["lendingMarket"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["seed1Account"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["seed2Account"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["ownerUserMetadata"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["rent"], is_signer=False, is_writable=False),
    AccountMeta(pubkey=accounts["systemProgram"], is_signer=False, is_writable=False),
    ]
    if remaining_accounts is not None:
        keys += remaining_accounts
    identifier = b"\xfb\x0a\xe7\x4c\x1b\x0b\x9f\x60"
    encoded_args = layout.build({
        "tag":args["tag"],
        "id":args["id"],
       })
    data = identifier + encoded_args
    return Instruction(program_id,data,keys)








